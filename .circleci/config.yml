version: 2.1

orbs:

  maven-cache:
    commands:
      with:
        parameters:
          cache-key:
            default: deps.edn
            type: string
          cache-version:
            default: ""
            type: string
          steps:
            type: steps
        steps:
          - restore_cache:
              key: maven-<< parameters.cache-version >>-{{ checksum "<< parameters.cache-key >>" }}
          - steps: << parameters.steps >>
          - save_cache:
              key: maven-<< parameters.cache-version >>-{{ checksum "<< parameters.cache-key >>" }}
              paths:
                - ~/.m2/repository

#
# clj-service orb
# - build: builds a clojure service docker image and persists it to workspace
# - deploy: gets the docker image from build and an environment parameter and deploys the service to the environment
#
  clj-service:
    jobs:
      build:
        working_directory: ~/ci-spread
        docker:
          - image: nodrama/clj:latest
        shell: /bin/bash -eo pipefail
        parameters:
          service:
            type: string
        steps:
          - setup_remote_docker:
              version: 19.03.13
          - checkout
          - restore_cache:
              key: maven-<< parameters.service >>-{{ checksum "deps.edn" }}
          - attach_workspace: # for libspread.jar
              at: lib
          - run:
              name: Lint namespaces
              command: |
                clojure -A:lint --lint src/clj src/cljc
              # working_directory: services/<< parameters.service >>
          - run:
              name: Build docker image
              command: |
                ./build.sh -b true -p false
                docker save -o << parameters.service >>.tar << parameters.service >>-service:latest
              working_directory: services/<< parameters.service >>
          - save_cache:
              key: maven-<< parameters.service >>-{{ checksum "deps.edn" }}
              paths:
                - ~/.m2/repository
          - persist_to_workspace:
              root: services
              paths:
                - << parameters.service >>/<< parameters.service >>.tar
      deploy:
        working_directory: ~/ci-spread
        environment:
          AWS_PAGER: ""
        docker:
          - image: nodrama/deploy:latest
        shell: /bin/bash -eo pipefail
        parameters:
          spread-env:
            type: string
          service:
            type: string
        steps:
          - setup_remote_docker:
              version: 19.03.13
          - checkout
          - attach_workspace:
              at: services
          - run:
              name: Source environment variables
              command: |
                cat "env/<< parameters.spread-env >>" >>  $BASH_ENV
                source $BASH_ENV
                echo "env: $SPREAD_ENV"
          - run:
              name: Configure serverless with AWS credentials
              command: |
                echo "env: $SPREAD_ENV"
                serverless config credentials --provider aws --key $CI_AWS_ACCESS_KEY_ID --secret $CI_AWS_SECRET_ACCESS_KEY
          - run:
              name: Deploy with serverless
              command: |
                docker load -i << parameters.service >>.tar
                ./build.sh -b false -p true
                serverless deploy --stage $SPREAD_ENV
              working_directory: services/<< parameters.service >>
          - run:
              name: Force redeployment of the ECS service
              command: |
                # NOTE : force service redeployment or sls doesn't seem to understand the image has changed
                aws ecs update-service --region $API_AWS_REGION --cluster spread-ecs-$SPREAD_ENV --service spread-<< parameters.service >> --force-new-deployment
              working_directory: services/<< parameters.service >>

#
# cljs-service orb
# - build: builds a static content archive
# - deploy: retrieves the static content archive and deploys it
#
  cljs-service:
    orbs:
      node: circleci/node@4.1.0
    jobs:
      build:
        working_directory: ~/ci-spread
        docker:
          - image: nodrama/cljs:latest
        shell: /bin/bash -eo pipefail
        parameters:
          spread-env:
            type: string
          service:
            type: string
        steps:
          - setup_remote_docker:
              version: 19.03.13
          - checkout
          - run:
              name: set ENV variables
              command: |
                # this works because this machine uses bash
                cat env/<< parameters.spread-env >> >> $BASH_ENV
                source $BASH_ENV
                echo "env: $SPREAD_ENV"
          - node/install-packages:
              # app-dir: services/<< parameters.service >>
              app-dir: .
              cache-version: << parameters.service >>
              pkg-manager: yarn
              include-branch-in-cache-key: false
          - restore_cache:
              key: maven-<< parameters.service >>-{{ checksum "shadow-cljs.edn" }}
          - run:
              name: Lint namespaces
              command: |
                yarn lint
          - run:
              name: Build static content
              command: |
                cd services/<< parameters.service >>
                ./build.sh -b true -p false
                cd ../
                tar -zcvf << parameters.service >>.tar.gz << parameters.service >>/
          - save_cache:
              key: maven-<< parameters.service >>-{{ checksum "shadow-cljs.edn" }}
              paths:
                - ~/.m2/repository
          - persist_to_workspace:
              root: services
              paths:
                - << parameters.service >>.tar.gz
      deploy:
        working_directory: ~/ci-spread
        environment:
          AWS_PAGER: ""
        docker:
          - image: nodrama/deploy:latest
        shell: /bin/bash -eo pipefail
        parameters:
          spread-env:
            type: string
          service:
            type: string
        steps:
          - setup_remote_docker:
              version: 19.03.13
          - checkout
          - attach_workspace:
              at: services
          - run:
              name: Source environment variables
              command: |
                cat "env/<< parameters.spread-env >>" >>  $BASH_ENV
                source $BASH_ENV
                echo "env: $SPREAD_ENV"
          - run:
              name: Configure serverless with AWS credentials
              command: |
                echo "env: $SPREAD_ENV"
                serverless config credentials --provider aws --key $CI_AWS_ACCESS_KEY_ID --secret $CI_AWS_SECRET_ACCESS_KEY
          - run:
              name: Deploy to CloudFront
              command: |
                tar -zxvf << parameters.service >>.tar.gz
                ./<< parameters.service >>/build.sh -b false -p true
              working_directory: services/

executors:
  java-builder:
    docker:
      - image: cimg/openjdk:11.0
    working_directory:  ~/ci-spread/

jobs:
  Build libspread:
    executor: java-builder
    steps:
      - checkout
      - maven-cache/with:
          cache-version: libspread
          cache-key: pom.xml
          steps:
            - run:
                name: Compile
                command: |
                  mvn clean package
      - persist_to_workspace:
          root: lib
          paths:
            - libspread-1.0.0-SNAPSHOT.jar

  Build db migration lambda:
    executor: java-builder
    steps:
      - checkout
      - maven-cache/with:
          cache-version: migration
          cache-key: services/db-migration/pom.xml
          steps:
            - run:
                name: Compile
                command: |
                  mvn clean package
                working_directory: services/db-migration
      - persist_to_workspace:
          root: services
          paths:
            - db-migration/target/db-migration.jar

  # NOTE: deploys and invokes db-migraton lambda
  Instrument DB:
    working_directory: ~/ci-spread
    docker:
      - image: nodrama/deploy:latest
    shell: /bin/bash -eo pipefail
    parameters:
      spread-env:
        type: string
    environment:
      AWS_PAGER: ""
    steps:
      - checkout
      - attach_workspace:
          at: services
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Source environment variables
          command: |
            cat "env/<< parameters.spread-env >>" >>  $BASH_ENV
            source $BASH_ENV
            echo "env: $SPREAD_ENV"
      - run:
          name: Configure serverless with AWS credentials
          command: |
            echo "env: $SPREAD_ENV"
            serverless config credentials --provider aws --key $CI_AWS_ACCESS_KEY_ID --secret $CI_AWS_SECRET_ACCESS_KEY
      - run:
          name: Deploy DB versioning lambda
          command: |
            echo "env: $SPREAD_ENV"
            serverless deploy --stage $SPREAD_ENV
          working_directory: services/db-migration
      - run:
          name: Instrument DB
          command: |
            echo "env: $SPREAD_ENV"
            serverless invoke --function migrate --stage $SPREAD_ENV --log
          working_directory: services/db-migration

  Test API:
    working_directory: ~/ci-spread
    # https://discuss.circleci.com/t/early-preview-new-ubuntu-20-04-linux-machine-executor-image/37281
    # aws-cli 2.0.52
    # docker 19.03.13
    # docker-compose 1.27.4
    # node 12.18.4 (default)
    # node 14.80.
    # openjdk 1.8
    # openjdk 11.0.8 (default)
    # yarn 1.22.5
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - checkout
      - run:
          name: set ENV variables
          command: |
            # this works because this machine uses bash
            cat env/dev >> $BASH_ENV
            source $BASH_ENV
            echo "env: $SPREAD_ENV"
      - attach_workspace: # for libspread.jar
          at: target
      - attach_workspace:
          at: services
      - run:
          name: Load docker images
          command: |
            docker load -i services/worker/worker.tar
            docker load -i services/api/api.tar
      - run:
          name: Start docker services
          command: |
            docker-compose -f deployments/dev/docker-compose.yml \
                           -f deployments/dev/services/docker-compose.yml up -d
      - run:
          name: Verify services respond
          command: |
            docker run --network container:dev_mysql appropriate/curl:latest --retry 12 --retry-delay 3 --retry-connrefused http://127.0.0.1:3306/ping
      - run:
          name: api service logs
          background: true
          command: |
            docker logs dev_api --follow
      - run:
          name: worker service logs
          background: true
          command: |
            docker logs dev_worker --follow
      - maven-cache/with:
          cache-version: migration
          cache-key: services/db-migration/pom.xml
          steps:
            - run:
                name: Liquibase migrations
                command: |
                  cd services/db-migration/
                  cp -rf src/main/resources/liquibase liquibase
                  mvn liquibase:update
      - run:
          name: Verify API responds
          command: |
            docker run --network host appropriate/curl:latest --retry 10 --retry-delay 1 --retry-connrefused http://127.0.0.1:3001
      - maven-cache/with:
          cache-version: tests
          cache-key: deps.edn
          steps:
            - run:
                name: Install Clojure
                command: |
                  curl -O https://download.clojure.org/install/linux-install-1.10.3.986.sh
                  chmod +x linux-install-1.10.3.986.sh
                  sudo ./linux-install-1.10.3.986.sh
            - run:
                name: Run test suite
                command: |
                  bin/kaocha

workflows:
  version: 2

  services:
    jobs:
      # ~~~ BUILD ~~~
      - Build libspread
      - clj-service/build:
          name: Build worker service
          service: "worker"
          requires:
            - Build libspread
      - clj-service/build:
          name: Build api service
          service: "api"
          requires:
            - Build libspread
      - Test API:
          requires:
            - Build worker service
            - Build api service
      # - cljs-service/build:
      #     name: Build UI
      #     # NOTE : we build cljs services with prod ENV vars, since they are macro loaded at comile-time
      #     spread-env: "prod"
      #     service: "ui"
      # - cljs-service/build:
      #     name: Build Analysis Viewer
      #     # NOTE : we build cljs services with prod ENV vars, since they are macro loaded at comile-time
      #     spread-env: "prod"
      #     service: "analysis-viewer"
      # - Build db migration lambda
      # ~~~ DEPLOY ~~~
      # PROD
      # - "[PROD] Approve deployment":
      #     type: approval
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     requires:
      #       - Build db migration lambda
      #       - Build Analysis Viewer
      #       - Build UI
      #       - Test API
      # - Instrument DB:
      #     spread-env: "prod"
      #     requires:
      #       - "[PROD] Approve deployment"
      # - clj-service/deploy:
      #     name: "Deploy API service"
      #     spread-env: "prod"
      #     service: "api"
      #     requires:
      #       - "[PROD] Approve deployment"
      # - clj-service/deploy:
      #     name: "Deploy worker service"
      #     spread-env: "prod"
      #     service: "worker"
      #     requires:
      #       - "[PROD] Approve deployment"
      # - cljs-service/deploy:
      #     name: "Deploy UI service"
      #     spread-env: "prod"
      #     service: "ui"
      #     requires:
      #       - "[PROD] Approve deployment"
      # - cljs-service/deploy:
      #     name: "Deploy analysis-viewer service"
      #     spread-env: "prod"
      #     service: "analysis-viewer"
      #     requires:
      #       - "[PROD] Approve deployment"
