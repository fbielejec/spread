org: nodrama
app: spread

service: spread-ecs

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  # stackName: spread-ecs
  stage: ${opt:stage, self:provider.stage}
  region:
    prod: us-east-2

provider:
  name: aws
  profile: spread
  region: ${self:custom.region.${self:custom.stage}, self.region.dev}
  stage: dev
  deploymentBucket: spread-${self:custom.stage}-serverlessdeploymentbucket

resources:
  Resources:

    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: spread-ecs-${self:custom.stage}

    # This is an IAM role which authorizes ECS to manage resources on your
    # account on your behalf, such as updating your load balancer with the
    # details of where your containers are, so that traffic can reach your
    # containers.
    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Rules which allow ECS to attach network interfaces to instances
                # on your behalf in order for awsvpc networking mode to work right
                - 'ec2:AttachNetworkInterface'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:CreateNetworkInterfacePermission'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DeleteNetworkInterfacePermission'
                - 'ec2:Describe*'
                - 'ec2:DetachNetworkInterface'

                # Rules which allow ECS to update load balancers on your behalf
                # with the information sabout how to send traffic to your containers
                - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                - 'elasticloadbalancing:DeregisterTargets'
                - 'elasticloadbalancing:Describe*'
                - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                - 'elasticloadbalancing:RegisterTargets'
              Resource: '*'

    # This is a role which is used by the ECS tasks themselves.
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-spread-ecs-task-execution-role
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: AmazonECSTaskExecutionRolePolicy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogStreams"
                Resource: '*'

  Outputs:
    ECSCluster:
      Description: The identifier of the ECS cluster
      Value: !Ref 'ECSCluster'
      Export:
        Name: ${self:custom.stage}-spread-ecs-id

    # ECSClusterArn:
    #   Description: The identifier of the ECS cluster
    #   Value: !GetAtt 'ECSCluster.Arn'
    #   Export:
    #     Name: ${self:custom.stage}-spread-ecs-arn

    ECSTaskExecutionRole:
      Description: The ARN of the ECS role
      Value: !GetAtt 'ECSTaskExecutionRole.Arn'
      Export:
        Name: ${self:custom.stage}-ecs-task-role-id
