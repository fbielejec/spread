{:scalars
 {:BigInt {:parse     :scalar/parse-big-int
           :serialize :scalar/serialize-big-int}}

 :enums
 {:Status {:values [:OK]}

  :AnalysisType {:values [:CONTINUOUS_TREE
                          :DISCRETE_TREE
                          :BAYES_FACTOR_ANALYSIS]}

  :AnalysisStatus {:values [:UPLOADED
                            :ATTRIBUTES_PARSED
                            :ARGUMENTS_SET
                            :QUEUED
                            :RUNNING
                            :SUCCEEDED
                            :ERROR]}}

 :input-objects
 {:File {:fields {:name      {:type String}
                  :extension {:type String}}}}

 :objects
 {:Pong {:description "Healthcheck response."
         :fields      {:message {:type (non-null String)}
                       :status  {:type    (non-null Status)
                                 :resolve :resolve/pong->status}}}

  :JWT {:fields {:accessToken {:type (non-null String)}}}

  :TouchAnalysisReturnType {:description "Returned by the touch analysis mutation."
                            :fields      {:id    {:type (non-null ID)}
                                          :isNew {:type (non-null Boolean)}}}

  :DeleteFileReturnType {:description "Returned by the delete file mutation."
                         :fields      {:key {:type (non-null String)}}}

  :DeleteAnalysisReturnType {:description "Returned by the delete analysis mutation."
                             :fields      {:id {:type (non-null ID)}}}

  :DeleteUserDataReturnType {:description "Returned by the delete user data mutation."
                             :fields      {:userId {:type (non-null ID)}}}

  :DeleteUserAccountReturnType {:description "Returned by the delete user data mutation."
                                :fields      {:userId {:type (non-null ID)}}}

  :Analysis {:description "Represents common fields of a parser. Returned by queries."
             :fields      {:id              {:type (non-null ID)}
                           :userId          {:type (non-null ID)}
                           :readableName    {:description "Human-readable name. Usually file name."
                                             :type        String}
                           :createdOn       {:type (non-null :BigInt)}
                           :progress        {:type Float}
                           :status          {:type (non-null :AnalysisStatus)}
                           :isNew           {:description "Has this analysis been viewed?"
                                             :type        (non-null Boolean)}
                           :error           {:type    String
                                             :resolve :resolve/analysis->error}
                           :viewerUrlParams {:type String}
                           :ofType          {:type (non-null :AnalysisType)}}}

  :ParserStatus {:description "Analysis status, progress and some optional fields. Returned by mutations and used for subscriptions to the workers progress."
                 :fields      {:id           {:type (non-null ID)}
                               :readableName {:type String}
                               :ofType       {:type :AnalysisType}
                               :progress     {:type Float}
                               :status       {:type (non-null :AnalysisStatus)}}}

  :User {:fields {:id    {:type (non-null ID)}
                  :email {:type (non-null String)}}}

  :ContinuousTree {:description "Represents ContinuousTree entity."
                   :fields      {:id                       {:description "Unique identifier."
                                                            :type        (non-null ID)}
                                 :userId                   {:type (non-null ID)}
                                 :readableName             {:type String}
                                 :createdOn                {:type (non-null :BigInt)}
                                 :treeFileUrl              {:type (non-null String)}
                                 :treeFileName             {:type (non-null String)}
                                 :xCoordinateAttributeName {:type String}
                                 :yCoordinateAttributeName {:type String}
                                 :timescaleMultiplier      {:type Float}
                                 :mostRecentSamplingDate   {:type String}
                                 :status                   {:type (non-null :AnalysisStatus)}
                                 :progress                 {:type Float}
                                 :attributeNames           {:type    (list String)
                                                            :resolve :resolve/continuous-tree->attributes}
                                 :timeSlicer               {:type     :TimeSlicer
                                                            :resolver :resolve/continuous-tree->time-slicer}
                                 :outputFileUrl            {:type String}
                                 :analysis                 {:type    (non-null :Analysis)
                                                            :resolve :resolve/tree->user-analysis}}}

  :DiscreteTree {:description "Represents DiscreteTree entity."
                 :fields      {:id                     {:type (non-null ID)}
                               :userId                 {:type (non-null ID)}
                               :readableName           {:type String}
                               :createdOn              {:type (non-null :BigInt)}
                               :treeFileName           {:type (non-null String)}
                               :treeFileUrl            {:type (non-null String)}
                               :locationsFileName      {:type String}
                               :locationsFileUrl       {:type String}
                               :locationsAttributeName {:type String}
                               :timescaleMultiplier    {:type Float}
                               :mostRecentSamplingDate {:type String}
                               :status                 {:type (non-null :AnalysisStatus)}
                               :progress               {:type Float}
                               :attributeNames         {:type    (list String)
                                                        :resolve :resolve/discrete-tree->attributes}
                               :outputFileUrl          {:type String}
                               :analysis               {:type    (non-null :Analysis)
                                                        :resolve :resolve/tree->user-analysis}}}

  :TimeSlicer {:description "Represents TimeSlicer entity."
               :fields      {:id                                 {:type (non-null ID)}
                             :userId                             {:type (non-null ID)}
                             :readableName                       {:type String}
                             :createdOn                          {:type (non-null :BigInt)}
                             :treesFileUrl                       {:type (non-null String)}
                             :treesFileName                      {:type (non-null String)}
                             :sliceHeightsFileUrl                {:type String}
                             :burnIn                             {:type Float}
                             :relaxedRandomWalkRateAttributeName {:type String}
                             :traitAttributeName                 {:type String}
                             :contouringGridSize                 {:type Int}
                             :numberOfIntervals                  {:type Int}
                             :hpdLevel                           {:type String}
                             :timescaleMultiplier                {:type Float}
                             :mostRecentSamplingDate             {:type String}
                             :status                             {:type (non-null :AnalysisStatus)}
                             :progress                           {:type Float}
                             :attributeNames                     {:type    (list String)
                                                                  :resolve :resolve/time-slicer->attributes}
                             :outputFileUrl                      {:type String}
                             :analysis                           {:type    (non-null :Analysis)
                                                                  :resolve :resolve/tree->user-analysis}}}

  :BayesFactor {:description "Represents BSSVS support for a single connection."
                :fields      {:from                 {:type String}
                              :to                   {:type String}
                              :bayesFactor          {:type Float}
                              :posteriorProbability {:type Float}}}

  :BayesFactorAnalysis {:description "Represents BayesFactorAnalysis entity."
                        :fields      {:id                {:type (non-null ID)}
                                      :userId            {:type (non-null ID)}
                                      :readableName      {:type String}
                                      :createdOn         {:type (non-null :BigInt)}
                                      :logFileUrl        {:type (non-null String)}
                                      :logFileName       {:type (non-null String)}
                                      :locationsFileUrl  {:type String}
                                      :locationsFileName {:type String}
                                      :status            {:type (non-null :AnalysisStatus)}
                                      :progress          {:type Float}
                                      :burnIn            {:type Float}
                                      :outputFileUrl     {:type String}
                                      :analysis          {:type    (non-null :Analysis)
                                                          :resolve :resolve/tree->user-analysis}
                                      :bayesFactors      {:type    (list :BayesFactor)
                                                          :resolve :resolve/bayes-factor-analysis->bayes-factors}}}}

 :queries
 {:ping {:type        :Pong
         :description "Returns a healthcheck response."
         :args        {:from {:type String}}
         :resolve     :query/pong}

  :getAuthorizedUser {:type        :User
                      :description "Returns a current user. Does not need ID which is read from the Authorization header."
                      :resolve     :query/getAuthorizedUser}

  :getContinuousTree {:type        :ContinuousTree
                      :description "Returns a ContinuousTree entity by id."
                      :args        {:id {:type (non-null ID)}}
                      :resolve     :query/getContinuousTree}

  :getDiscreteTree {:type        :DiscreteTree
                    :description "Returns a DiscreteTree entity by id."
                    :args        {:id {:type (non-null ID)}}
                    :resolve     :query/getDiscreteTree}

  :getBayesFactorAnalysis {:type        :BayesFactorAnalysis
                           :description "Returns a BayesFactorAnalysis entity by id."
                           :args        {:id {:type (non-null ID)}}
                           :resolve     :query/getBayesFactorAnalysis}

  :getUserAnalysis {:type        (list :Analysis)
                    :description "Returns all results for the authenticated user."
                    :resolve     :query/getUserAnalysis}

  }

 :subscriptions
 {:parserStatus {:type        :ParserStatus
                 :description "Returns a subscription to any parser status by it's ID."
                 :args        {:id {:type (non-null ID)}}
                 :stream      :subscription/parserStatus}}

 :mutations
 {:googleLogin {:type        :JWT
                :description "Validates google token and returns a spread JWT access-token."
                :args        {:code        {:type String}
                              :redirectUri {:type String}}
                :resolve     :mutation/googleLogin}

  :getUploadUrls {:type        (list String)
                  :description "Returns one-time POST urls."
                  :args        {:files {:type (non-null (list :File))}}
                  :resolve     :mutation/getUploadUrls}

  :uploadContinuousTree {:type        :ParserStatus
                         :description "Persists continuous tree. Returns a ParserStatus with id."
                         :args        {:readableName {:type String}
                                       :treeFileUrl  {:type (non-null String)}}
                         :resolve     :mutation/uploadContinuousTree}

  :updateContinuousTree {:type        :ParserStatus
                         :description "Updates the entity with settings for parsing the tree graph."
                         :args        {:id                       {:type (non-null ID)}
                                       :readableName             {:type String}
                                       :xCoordinateAttributeName {:type (non-null String)}
                                       :yCoordinateAttributeName {:type (non-null String)}
                                       :timescaleMultiplier      {:type Float}
                                       :mostRecentSamplingDate   {:type (non-null String)}}
                         :resolve     :mutation/updateContinuousTree}

  :startContinuousTreeParser {:type        :ParserStatus
                              :description "Starts executing a parser. Returns a ParserStatus with id."
                              :args        {:id {:type (non-null ID)}}
                              :resolve     :mutation/startContinuousTreeParser}

  :uploadDiscreteTree {:type        :DiscreteTree
                       :description "Persists discrete tree. Returns a ParserStatus with id."
                       :args        {:treeFileUrl      {:type (non-null String)}
                                     :treeFileName     {:type (non-null String)}}
                       :resolve     :mutation/uploadDiscreteTree}

  :updateDiscreteTree {:type        :DiscreteTree
                       :description "Updates the entity with settings for parsing the tree graph."
                       :args        {:id                     {:type (non-null ID)}
                                     :readableName           {:type String}
                                     :locationsFileUrl       {:type String}
                                     :locationsFileName      {:type String}
                                     :locationsAttributeName {:type String}
                                     :timescaleMultiplier    {:type Float}
                                     :mostRecentSamplingDate {:type String}}
                       :resolve     :mutation/updateDiscreteTree}

  :startDiscreteTreeParser {:type        :DiscreteTree
                            :description "Starts executing a parser. Returns a ParserStatus with id."
                            :args        {:id                     {:type (non-null ID)}
                                          :readableName           {:type String}
                                          :locationsAttributeName {:type String}
                                          :timescaleMultiplier    {:type Float}
                                          :mostRecentSamplingDate {:type String}}
                            :resolve     :mutation/startDiscreteTreeParser}

  :uploadTimeSlicer {:type        :ParserStatus
                     :description "Persists continuous trees. Returns a ParserStatus with id."
                     :args        {:continuousTreeId    {:type (non-null ID)}
                                   :treesFileUrl        {:type (non-null String)}
                                   :sliceHeightsFileUrl {:type String}}
                     :resolve     :mutation/uploadTimeSlicer}

  :updateTimeSlicer {:type        :ParserStatus
                     :description "Updates the entity with settings for parsing."
                     :args        {:id                                 {:type (non-null ID)}
                                   :burnIn                             {:type Float}
                                   :relaxedRandomWalkRateAttributeName {:type (non-null String)}
                                   :traitAttributeName                 {:type (non-null String)}
                                   :contouringGridSize                 {:type Int}
                                   :numberOfIntervals                  {:type Int}
                                   :hpdLevel                           {:type (non-null Float)}
                                   :timescaleMultiplier                {:type Float}
                                   :mostRecentSamplingDate             {:type (non-null String)}}
                     :resolve     :mutation/updateTimeSlicer}

  :uploadBayesFactorAnalysis {:type        :BayesFactorAnalysis
                              :description "Persists bayes factor trees. Returns a ParserStatus with id."
                              :args        {:logFileUrl        {:type (non-null String)}
                                            :logFileName        {:type (non-null String)}}
                              :resolve     :mutation/uploadBayesFactorAnalysis}

  :updateBayesFactorAnalysis {:type        :BayesFactorAnalysis
                              :description "Updates the entity with settings for parsing the tree graph."
                              :args        {:id                {:type (non-null ID)}
                                            :readableName      {:type String}
                                            :locationsFileUrl  {:type String}
                                            :locationsFileName  {:type String}
                                            :numberOfLocations {:type Int}
                                            :burnIn            {:type Float}}
                              :resolve     :mutation/updateBayesFactorAnalysis}

  :startBayesFactorParser {:type        :ParserStatus
                           :description "Starts executing a parser. Returns a ParserStatus with id."
                           :args        {:id {:type (non-null ID)}}
                           :resolve     :mutation/startBayesFactorParser}

  :touchAnalysis {:type        :TouchAnalysisReturnType
                  :description "Marks analysis as viewed"
                  :args        {:id {:type (non-null ID)}}
                  :resolve     :mutation/touchAnalysis}

  :deleteFile {:type        :DeleteFileReturnType
               :description "Deletes analysis from the DB and it's content from S3"
               :args        {:url {:type (non-null String)}}
               :resolve     :mutation/deleteFile}

  :deleteAnalysis {:type        :DeleteAnalysisReturnType
                   :description "Deletes analysis from the DB and it's content from S3"
                   :args        {:id {:type (non-null ID)}}
                   :resolve     :mutation/deleteAnalysis}

  :deleteUserData {:type        :DeleteUserDataReturnType
                   :description "Deletes analysis from the DB and it's content from S3"
                   :resolve     :mutation/deleteUserData}

  :deleteUserAccount {:type        :DeleteUserAccountReturnType
                      :description "Deletes user account data from the DB and data content from S3"
                      :resolve     :mutation/deleteUserAccount}

  }}
